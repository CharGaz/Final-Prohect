/* autogenerated by Processing revision 1293 on 2025-01-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import g4p_controls.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Processing extends PApplet {

//Librairies:


//Global Variables:
ArrayList<Star> stars = new ArrayList<Star>();
int numStars = 10000;
int[] starColor = {color(255), color(255, 200, 150), color(255, 100, 100), color(100, 200, 255), color(255, 255, 100), color(255, 150, 50)};

int numPlanets;
//Spiral Galaxy:
float rad = 450; //Radius of the solar system/ max radius
float elip = 0.8f; //Making the solar system into a elips, not just a circle
float twist = 8/rad; //"Twist" of the solar system

float[] angle = new float[numStars];
float[] radius = new float[numStars]; //radius of a star


//Panning and Zooming:
float scale = 1;
float scalefactor = 0.1f;
float xPan = 500;
float yPan = 400;
int panfactor = 12;

boolean showSolarSystem = false;
public void setup(){           
    /* size commented out by preprocessor */;
    background(0);
    createGUI();

    spiralGalaxy(); //Type of galaxy being drawn

    String args[] = {"Star info"};
    SecondApplet sa = new SecondApplet();
    PApplet.runSketch(args, sa);
    
}

public void draw(){
  background(0);
  
  translate(width/2, height/2);  
  scale(scale);
  translate(-xPan, -yPan);
  

  

  for(Star s : stars){
    if(!showSolarSystem){
      s.drawStar();
    }
    s.solarSystem();
  
  }  
   
  
}
public void mousePressed(){
  //Undoing the translations/scale on the coorodiantes of the mouse
  float x = ((mouseX - width/2) / scale) + xPan;
  float y = ((mouseY - height/2) / scale) + yPan;
  

  for(Star s : stars){
    //Cheking if mouse is within a star
    if(x >= s.pos.x - s.size && x <= s.pos.x + s.size && y >= s.pos.y-s.size && y <= s.pos.y + s.size ){
      showSolarSystem = true;
      s.solarSystem = true;
      resetView();
    }
    
  }
}

public void resetView(){
  scale = 1;
  xPan = 500;
  yPan = 400;
}

public class SecondApplet extends PApplet {

  public void settings() {
    size(200, 300);
  }
  public void draw() {
    background(255);
    fill(0);
    text("This star has "+ numPlanets + " planets",50,100);
  }
}

public void spiralGalaxy(){
    float cx = width/2; //center x
    float cy = height/2; //center y

    for(int i = 0; i < numStars; i++){

        angle[i] = random(TWO_PI);
        radius[i] = random(1, rad);
        float r = radius[i];
        float a = angle[i];
        angle[i] = a;

        float x = r*cos(a);
        float y = r*elip*sin(a);
        float b = r*twist;
        float s = sin(b);
        float c = cos(b);
        
        float finalX = cx + s * x + c * y; //Plotting the x to be on a spiral
        float finalY = cy + c * x - s * y; //Plotting the y to be on a spiral

       
        // for(Star otherStar : stars){
        //     float distance = dist(finalX, finalY, otherStar.pos.x, otherStar.pos.y);
        //     while(-1 < distance && distance > 1){

        //     }
        // }



        float size = random(1,3); //size of the star
        float brightness = random(50,255); //brightness of the star
        int starCol = starColor[PApplet.parseInt(random(starColor.length))]; // colour of the star
            
        stars.add(new Star(finalX,finalY, size, brightness, starCol)); //Putting info into star class  
    }
}
class Star{
    PVector pos;
    float size;
    float brightness;
    int col;
    boolean solarSystem;

    //CONSTRUCTOR:
    Star(float x, float y, float size, float brightness, int col){
        this.pos = new PVector(x,y);
        this.size = size;
        this.brightness = brightness;
        this.col = col;
        this.solarSystem = false;
        
    }

    public void drawStar(){ //Drawing the star
  
        stroke(this.col);
        strokeWeight(this.size);
        circle(this.pos.x, this.pos.y, this.size);
        
    } 

    public void solarSystem(){
        
        if(solarSystem){
            //Drawing the star
            stroke(this.col);
            fill(this.col);
            circle(500,400, this.size*100);
            println(this.size);
        }
        
    }
}




/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:915552:
  appc.background(230);
} //_CODE_:window1:915552:

public void zoom_Clicked(GButton source, GEvent event) { //_CODE_:zoom:736080:
  scale += scalefactor;

} //_CODE_:zoom:736080:

public void zoomOut_Clicked(GButton source, GEvent event) { //_CODE_:zoomOut:358050:
  if(1 < scale){
    scale -= scalefactor;
  }
  
} //_CODE_:zoomOut:358050:

public void panLeft_Clickled(GButton source, GEvent event) { //_CODE_:panLeft:876359:
  // if( 0 < xPan){
  //   xPan -= 12;
  // }
  xPan -= panfactor;
  
} //_CODE_:panLeft:876359:

public void panRight_Clicked(GButton source, GEvent event) { //_CODE_:panRight:905221:
  // if( xPan >= width){
  //   xPan += 12;
  // }

  xPan += panfactor;
} //_CODE_:panRight:905221:

public void panUp_Clicked(GButton source, GEvent event) { //_CODE_:panUp:619938:
  // if( 0 < yPan){
  //   yPan -= 12;
  // }
  
  yPan -= panfactor;
} //_CODE_:panUp:619938:

public void panDown_Clicked(GButton source, GEvent event) { //_CODE_:panDown:224973:
  // if( yPan >= height){
  //   yPan += 12;
  // }

  yPan += panfactor;
} //_CODE_:panDown:224973:

public void scaleFactor_Change(GSlider source, GEvent event) { //_CODE_:scaleFactor:398326:
  scalefactor = scaleFactor.getValueF();
} //_CODE_:scaleFactor:398326:

public void panFactor_Change(GSlider source, GEvent event) { //_CODE_:panFactor:327259:
  panfactor = panFactor.getValueI();
} //_CODE_:panFactor:327259:





// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Sliders and Such", 0, 0, 300, 400, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  zoom = new GButton(window1, 11, 15, 80, 30);
  zoom.setText("Zoom in");
  zoom.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  zoom.addEventHandler(this, "zoom_Clicked");
  zoomOut = new GButton(window1, 12, 55, 80, 30);
  zoomOut.setText("Zoom out");
  zoomOut.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  zoomOut.addEventHandler(this, "zoomOut_Clicked");
  panLeft = new GButton(window1, 110, 55, 42, 30);
  panLeft.setTextAlign(GAlign.CENTER, GAlign.CENTER);
  panLeft.setText("←");
  panLeft.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panLeft.addEventHandler(this, "panLeft_Clickled");
  panRight = new GButton(window1, 210, 55, 44, 30);
  panRight.setText("→");
  panRight.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panRight.addEventHandler(this, "panRight_Clicked");
  panUp = new GButton(window1, 160, 15, 44, 30);
  panUp.setText("↑");
  panUp.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panUp.addEventHandler(this, "panUp_Clicked");
  panDown = new GButton(window1, 160, 55, 44, 30);
  panDown.setText("↓");
  panDown.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panDown.addEventHandler(this, "panDown_Clicked");
  scaleFactor = new GSlider(window1, 11, 95, 80, 40, 10.0f);
  scaleFactor.setShowValue(true);
  scaleFactor.setLimits(0.1f, 0.1f, 1.0f);
  scaleFactor.setNbrTicks(5);
  scaleFactor.setNumberFormat(G4P.DECIMAL, 2);
  scaleFactor.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  scaleFactor.setOpaque(false);
  scaleFactor.addEventHandler(this, "scaleFactor_Change");
  panFactor = new GSlider(window1, 134, 94, 100, 40, 10.0f);
  panFactor.setShowValue(true);
  panFactor.setLimits(10, 10, 20);
  panFactor.setNumberFormat(G4P.INTEGER, 0);
  panFactor.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  panFactor.setOpaque(false);
  panFactor.addEventHandler(this, "panFactor_Change");
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GButton zoom; 
GButton zoomOut; 
GButton panLeft; 
GButton panRight; 
GButton panUp; 
GButton panDown; 
GSlider scaleFactor; 
GSlider panFactor; 


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
